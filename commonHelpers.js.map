{"version":3,"file":"commonHelpers.js","sources":["../src/js/01-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\n\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nconst startButton = document.querySelector('[data-start]');\nconst daysSpan = document.querySelector('[data-days]');\nconst hoursSpan = document.querySelector('[data-hours]');\nconst minutesSpan = document.querySelector('[data-minutes]');\nconst secondsSpan = document.querySelector('[data-seconds]');\nlet userSelectedDate;\n\nstartButton.disabled = true;\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    const selectedDate = selectedDates[0];\n    if (selectedDate <= new Date()) {\n      iziToast.warning({\n        title: 'Warning',\n        message: 'Please choose a date in the future',\n      });\n      startButton.disabled = true;\n    } else {\n      userSelectedDate = selectedDate;\n      startButton.disabled = false;\n    }\n  },\n};\n\nflatpickr('#datetime-picker', options);\n\nstartButton.addEventListener('click', () => {\n  startButton.disabled = true;\n  const countdownInterval = setInterval(() => {\n    const now = new Date();\n    const timeDifference = userSelectedDate - now;\n    if (timeDifference <= 0) {\n      clearInterval(countdownInterval);\n      updateTimerDisplay(0, 0, 0, 0);\n      return;\n    }\n    const { days, hours, minutes, seconds } = convertMs(timeDifference);\n    updateTimerDisplay(days, hours, minutes, seconds);\n  }, 1000);\n});\n\nfunction convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  const days = Math.floor(ms / day);\n  const hours = Math.floor((ms % day) / hour);\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\nfunction addLeadingZero(value) {\n  return String(value).padStart(2, '0');\n}\n\nfunction updateTimerDisplay(days, hours, minutes, seconds) {\n  daysSpan.textContent = addLeadingZero(days);\n  hoursSpan.textContent = addLeadingZero(hours);\n  minutesSpan.textContent = addLeadingZero(minutes);\n  secondsSpan.textContent = addLeadingZero(seconds);\n}\n"],"names":["startButton","daysSpan","hoursSpan","minutesSpan","secondsSpan","userSelectedDate","options","selectedDates","selectedDate","iziToast","flatpickr","countdownInterval","timeDifference","updateTimerDisplay","days","hours","minutes","seconds","convertMs","ms","addLeadingZero","value"],"mappings":"sFAMA,MAAMA,EAAc,SAAS,cAAc,cAAc,EACnDC,EAAW,SAAS,cAAc,aAAa,EAC/CC,EAAY,SAAS,cAAc,cAAc,EACjDC,EAAc,SAAS,cAAc,gBAAgB,EACrDC,EAAc,SAAS,cAAc,gBAAgB,EAC3D,IAAIC,EAEJL,EAAY,SAAW,GAEvB,MAAMM,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACrB,MAAMC,EAAeD,EAAc,CAAC,EAChCC,GAAgB,IAAI,MACtBC,EAAS,QAAQ,CACf,MAAO,UACP,QAAS,oCACjB,CAAO,EACDT,EAAY,SAAW,KAEvBK,EAAmBG,EACnBR,EAAY,SAAW,GAE1B,CACH,EAEAU,EAAU,mBAAoBJ,CAAO,EAErCN,EAAY,iBAAiB,QAAS,IAAM,CAC1CA,EAAY,SAAW,GACvB,MAAMW,EAAoB,YAAY,IAAM,CAE1C,MAAMC,EAAiBP,EADX,IAAI,KAEhB,GAAIO,GAAkB,EAAG,CACvB,cAAcD,CAAiB,EAC/BE,EAAmB,EAAG,EAAG,EAAG,CAAC,EAC7B,MACD,CACD,KAAM,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,GAAYC,EAAUN,CAAc,EAClEC,EAAmBC,EAAMC,EAAOC,EAASC,CAAO,CACjD,EAAE,GAAI,CACT,CAAC,EAED,SAASC,EAAUC,EAAI,CAMrB,MAAML,EAAO,KAAK,MAAMK,EAAK,KAAG,EAC1BJ,EAAQ,KAAK,MAAOI,EAAK,MAAO,IAAI,EACpCH,EAAU,KAAK,MAAQG,EAAK,MAAO,KAAQ,GAAM,EACjDF,EAAU,KAAK,MAASE,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAL,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAEA,SAASG,EAAeC,EAAO,CAC7B,OAAO,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG,CACtC,CAEA,SAASR,EAAmBC,EAAMC,EAAOC,EAASC,EAAS,CACzDhB,EAAS,YAAcmB,EAAeN,CAAI,EAC1CZ,EAAU,YAAckB,EAAeL,CAAK,EAC5CZ,EAAY,YAAciB,EAAeJ,CAAO,EAChDZ,EAAY,YAAcgB,EAAeH,CAAO,CAClD"}